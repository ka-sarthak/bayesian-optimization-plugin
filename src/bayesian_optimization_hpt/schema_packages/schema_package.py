from typing import (
    TYPE_CHECKING,
)

from nomad.config import config
from nomad.metainfo import SchemaPackage

configuration = config.get_plugin_entry_point(
    'bayesian_optimization_hpt.schema_packages:schema_package_entry_point'
)

m_package = SchemaPackage()

from nomad.datamodel.data import (
    ArchiveSection,
    EntryData,
)
from nomad.datamodel.metainfo.basesections import (
    ActivityStep,
    Measurement,
    MeasurementResult,
)
from nomad.metainfo import (
    Package,
    Quantity,
    Section,
    SubSection,
)
from nomad.parsing.tabular import TableData

if TYPE_CHECKING:
    pass

m_package = Package(name='HPT data loader and schemas')


class PassivationPerformanceResult(MeasurementResult):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    carrier_lifetime = Quantity(
        type=float,
        description='The average time taken for a carrier to recombine.',
        a_eln={'component': 'NumberEditQuantity'},
        a_tabular={'name': 'Carrier lifetime [um]'},
        unit='microsecond',
    )


class HydrogenPlasmaTreatment(ActivityStep):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    temperature = Quantity(
        type=float,
        description='Process temperature.',
        a_eln={'component': 'NumberEditQuantity'},
        a_tabular={'name': 'Process temperature [K]'},
        unit='kelvin',
    )
    duration = Quantity(
        type=float,
        description='Process duration.',
        a_eln={'component': 'NumberEditQuantity'},
        a_tabular={'name': 'Process time [min]'},
        unit='minute',
    )
    h2_pressure = Quantity(
        type=float,
        description='Hydrogen gas pressure.',
        a_eln={'component': 'NumberEditQuantity'},
        a_tabular={'name': 'H2 pressure [Pa]'},
        unit='Pa',
    )
    h2_flow_rate = Quantity(
        type=float,
        description='Hydrogen gas flow rate.',
        a_eln={'component': 'NumberEditQuantity'},
        a_tabular={'name': 'H2 flow rate [sccm]'},
        unit='cm**3/minute',
    )
    rf_power = Quantity(
        type=float,
        description="""
        RF (radio frequency) power supplied to generate and sustain plasma.
        """,
        a_eln={'component': 'NumberEditQuantity'},
        a_tabular={'name': 'RF power [W]'},
        unit='W',
    )
    electrode_distance = Quantity(
        type=float,
        description='Distance between electrodes.',
        a_eln={'component': 'NumberEditQuantity'},
        a_tabular={'name': 'Electrod distance [mm]'},
        unit='millimeter',
    )


class PassivationPerformanceMeasurement(Measurement, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        more={'label_quantity': '#/data/name'},
    )
    name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
        a_tabular={'name': 'Experiment name'},
    )
    steps = SubSection(
        section_def=HydrogenPlasmaTreatment,
        repeats=True,
    )
    results = SubSection(
        section_def=PassivationPerformanceResult,
        repeats=True,
    )


class HydrogenPlasmaTreatments(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    reference = Quantity(
        type=PassivationPerformanceMeasurement,
        a_eln={'component': 'ReferenceEditQuantity'},
    )


class HPTDataLoader(EntryData, TableData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    data_file = Quantity(
        type=str,
        a_tabular_parser={
            'mapping_options': [
                {
                    'mapping_mode': 'row',
                    'file_mode': 'multiple_new_entries',
                    'sections': ['hydrogen_plasma_treatments'],
                }
            ]
        },
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )
    hydrogen_plasma_treatments = SubSection(
        section_def=HydrogenPlasmaTreatments,
        repeats=True,
    )


m_package.__init_metainfo__()
